// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id       Int    @id @default(autoincrement())
  username String
  password String
  type     String
  status   Int    @default(0)
  userId   Int?
  user     User?  @relation("UserHasAccount", fields: [userId], references: [id])
}

model User {
  id            Int            @id @default(autoincrement())
  account       Account?       @relation("UserHasAccount")
  createdAt     DateTime       @default(now())
  SocialUpdates SocialUpdate[] @relation("UserAuthorSocialUpdate")
  PostAnalytic  PostAnalytic[]
  profileName   String
  avatarUrl     String
  defaultCity   City           @relation(fields: [cityId], references: [id])
  cityId        Int
  favCities     City[]         @relation("UserFavCities")
  firstName     String
  lastName      String
  birthdate     DateTime       @default(now())
}

model City {
  id         Int        @id @default(autoincrement())
  name       String
  postMeta   PostMeta[]
  location   Json
  createdAt  DateTime   @default(now())
  User       User[]
  FavByUsers User[]     @relation("UserFavCities")
}

model PostMeta {
  id           Int            @id @default(autoincrement())
  city         City           @relation(fields: [cityId], references: [id])
  cityId       Int
  location     Json
  SocialUpdate SocialUpdate[]
}

model SocialUpdate {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  user          User?          @relation("UserAuthorSocialUpdate", fields: [userId], references: [id])
  userId        Int?
  createdAt     DateTime       @default(now())
  state         Int            @default(0)
  type          String
  socialType    String
  // reference acts as "Update to" is social type is "post", otherwise it act as "Parent to" if type is "comment"
  reference     SocialUpdate?  @relation("SocialUpdateReference", fields: [referenceId], references: [id])
  referencedBy  SocialUpdate[] @relation("SocialUpdateReference")
  referenceId   Int?
  viewCount     Int            @default(0)
  reactionCount Json
  mediaUpload   MediaUpload    @relation(fields: [mediaUploadId], references: [id])
  postMeta      PostMeta       @relation(fields: [postMetaId], references: [id])
  PostAnalytic  PostAnalytic[]
  mediaUploadId Int
  postMetaId    Int
}

model MediaUpload {
  id           Int            @id @default(autoincrement())
  mediaUrls    String[]
  // no usage yet - TBA
  metadata     String
  SocialUpdate SocialUpdate[]
}

model ValueMeta {
  id    String @id
  value String
}

model PostAnalytic {
  id             Int          @id @default(autoincrement())
  type           String
  socialUpdate   SocialUpdate @relation(fields: [socialUpdateId], references: [id])
  socialUpdateId Int
  value          String
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
}

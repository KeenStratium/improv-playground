// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["createMany"]
}

model Account {
  id           Int    @id @default(autoincrement())
  username     String
  password     String
  emailAddress String @default("")
  type         String
  status       Int    @default(0)
  userId       Int?
  user         User?  @relation("UserHasAccount", fields: [userId], references: [id])
}

model User {
  id           Int            @id @default(autoincrement())
  account      Account?       @relation("UserHasAccount")
  createdAt    DateTime       @default(now())
  post         Post[]         @relation("UserAuthorPost")
  postAnalytic PostAnalytic[]
  avatarUrl    String
  defaultCity  City           @relation(fields: [cityId], references: [id])
  cityId       Int
  favCities    City[]         @relation("UserFavCities")
  firstName    String?
  lastName     String?
  birthdate    DateTime       @default(now())
  Comment      Comment[]      @relation("UserAuthorComment")
  isAnonymous  Boolean        @default(true)
  displayName  String
}

model City {
  id         Int      @id @default(autoincrement())
  name       String
  location   Json?
  createdAt  DateTime @default(now())
  user       User[]
  favByUsers User[]   @relation("UserFavCities")
  posts      Post[]
}

model Post {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  user          User?          @relation("UserAuthorPost", fields: [userId], references: [id])
  userId        Int?
  createdAt     DateTime       @default(now())
  state         Int            @default(0)
  // reference acts as "Update to" is social type is "post", otherwise it act as "Parent to" if type is "comment"
  reference     Post?          @relation("PostReference", fields: [referenceId], references: [id])
  referencedBy  Post[]         @relation("PostReference")
  referenceId   Int?
  reactionCount Json
  mediaUpload   MediaUpload?   @relation(fields: [mediaUploadId], references: [id])
  mediaUploadId Int?
  postAnalytic  PostAnalytic[]
  viewCount     Int            @default(0)
  type          ValueMeta?     @relation(fields: [typeId], references: [id])
  typeId        String?
  city          City           @relation(fields: [cityId], references: [id])
  cityId        Int
  location      Json?
  comments      Comment[]
}

model Comment {
  id              Int          @id @default(autoincrement())
  content         String
  user            User?        @relation("UserAuthorComment", fields: [userId], references: [id])
  userId          Int?
  createdAt       DateTime     @default(now())
  state           Int          @default(0)
  reactionCount   Json
  mediaUpload     MediaUpload? @relation(fields: [mediaUploadId], references: [id])
  mediaUploadId   Int?
  Post            Post?        @relation(fields: [postId], references: [id])
  postId          Int?
  childComments   Comment[]    @relation("CommentToComment")
  parentComment   Comment?     @relation("CommentToComment", fields: [parentCommentId], references: [id])
  parentCommentId Int?
}

model MediaUpload {
  id        Int       @id @default(autoincrement())
  mediaUrls String[]
  // no usage yet - TBA
  metadata  String?
  post      Post[]
  Comment   Comment[]
}

model ValueMeta {
  id    String @id
  value String
  Post  Post[]
}

model PostAnalytic {
  id     Int    @id @default(autoincrement())
  type   String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  value  String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}
